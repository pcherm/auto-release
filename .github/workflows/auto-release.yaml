name: Automate Release

on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch tags
        run: git fetch --tags

      - name: Determine next version
        id: version
        run: |
          # Extract the latest tag that matches the pattern
          latest_tag=$(git tag --list 'app-hyrax-customers@[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            # Default to version 1.0.0 if no previous tag exists
            next_version="app-hyrax-customers@1.0.0"
          else
            # Extract the major, minor, and patch numbers
            version=${latest_tag#app-hyrax-customers@}
            major=$(echo "$version" | cut -d. -f1)
            minor=$(echo "$version" | cut -d. -f2)
            patch=$(echo "$version" | cut -d. -f3)
            # Increment the patch version
            patch=$((patch + 1))
            next_version="app-hyrax-customers@${major}.${minor}.${patch}"
          fi
          echo "next_version=$next_version" >> $GITHUB_ENV
      - name: Set GitHub Token as an environment variable
        run: echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
        shell: bash

      # Create a new tag
      - name: Create and push tag
        run: |
          git tag "$next_version"
          git push origin "$next_version"

      # Create a GitHub release
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.next_version }}
          release_name: ${{ env.next_version }}
          body: |
            ## Release Notes
            - Changes in this release:
              $(git log $(git describe --tags --abbrev=0)..HEAD --oneline)
